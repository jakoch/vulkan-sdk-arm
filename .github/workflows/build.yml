name: "Build"

on:
  # You can manually run this workflow.
  workflow_dispatch:
  # Run the workflow on Pull Requests.
  pull_request:
  # Run the workflow for changes to main and release branch.
  push:
    branches:
    - main
    - 'releases/*'
  schedule:
    # Run the workflow weekly on Sunday at 00:00 UTC.
    - cron: '0 0 * * 0'

jobs:
  build:
    name: Build on ${{ matrix.OS }}
    runs-on: ${{ matrix.OS }}

    strategy:
      fail-fast: false
      matrix:
        OS:
          - ubuntu-22.04-arm
          - ubuntu-24.04-arm

    steps:
      - name: ðŸ¤˜ Checkout Code
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          if [[ "${{ matrix.OS }}" == "ubuntu-22.04-arm" ]]; then
            sudo apt install cmake ninja-build gcc-12 g++-12 bison ocaml-core xz-utils pkg-config python3-pip -y
            update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100
            update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 100
            fi
          if [[ "${{ matrix.OS }}" == "ubuntu-24.04-arm" ]]; then
            sudo apt install cmake ninja-build gcc-14 g++-14 bison ocaml-core xz-utils pkg-config python3-pip -y
            update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
            update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          fi

      - name: Setup Build Environment Python
        run: |
          pip3 install setuptools wheel

      - name: Setup Build Dependencies
        run: |
          sudo apt install -y --no-install-recommends \
          libglm-dev libxcb-dri3-0 libxcb-present0 libpciaccess0 \
          libpng-dev libxcb-keysyms1-dev libxcb-dri3-dev libx11-dev \
          libwayland-dev libxrandr-dev libxcb-randr0-dev libxcb-ewmh-dev \
          libx11-xcb-dev liblz4-dev libzstd-dev \
          libxml2-dev wayland-protocols

      - name: Get latest version of Vulkan SDK
        run: echo "VK_SDK_LATEST_VERSION=$(curl -s https://vulkan.lunarg.com/sdk/latest/warm.json | jq -r '.warm')" >> $GITHUB_ENV

      - name: Get latest version of vulkan-sdk-arm on Github Releases
        run: echo "GH_LATEST_RELEASE_VERSION=$(curl -s https://api.github.com/repos/jakoch/vulkan-sdk-arm/releases/latest | jq -r '.tag_name')" >> $GITHUB_ENV

      - name: Create build directory
        run: mkdir -p /opt/vulkan-sdk

      - name: Download Vulkan SDK
        working-directory: /opt/vulkan-sdk
        run: |
          curl -o vulkan-sdk.tar.xz https://sdk.lunarg.com/sdk/download/latest/linux/vulkan-sdk.tar.xz
          tar -xJf vulkan-sdk.tar.xz
          rm vulkan-sdk.tar.xz
          ls -la
          ls -la $VK_SDK_LATEST_VERSION

      # /opt/vulkan-sdk/1.4.304.0/x86_64/bin/vulkaninfo
      - name: Remove pre-built x86_64 artifacts
        working-directory: /opt/vulkan-sdk
        run: |
          ls -la $VK_SDK_LATEST_VERSION/x86_64
          rm -r $VK_SDK_LATEST_VERSION/x86_64

      - name: Build Vulkan SDK
        working-directory: /opt/vulkan-sdk
        run: |
          cd $VK_SDK_LATEST_VERSION
          ./vulkansdk --skip-deps --maxjobs \
            vulkan-loader \
            vulkan-validationlayers \
            vulkan-extensionlayer

#  headers \
#  loader \
#  layers \
#  shaderc \
#  spirv-tools \
#  glslang \
#  spirv-cross \
#  gfxrecon \
#  spirv-reflect \
#  vulkan-profiles \
#  volk \
#  vma \
#  vulkan-tools
